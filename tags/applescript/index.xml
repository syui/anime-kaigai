<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Applescript on アニメ海外反応</title>
    <link>https://anime.syui.cf/tags/applescript/index.xml</link>
    <description>Recent content in Applescript on アニメ海外反応</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [term](https://gitlab.com/syui/hugo-theme-term).</copyright>
    <atom:link href="https://anime.syui.cf/tags/applescript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AppleScript Reference</title>
      <link>https://anime.syui.cf/2016-09-28-applescript</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://anime.syui.cf/2016-09-28-applescript</guid>
      <description>&lt;p&gt;この記事は筆者 syui による、AppleScript に関する Tips をまとめたものになります。AppleScript の書き方ではなく、主に Example を紹介する内容になります。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;具体的には、AppleScript を ShellScript から実行したり、ターミナル・アプリとの連携を主体とする内容になります。&lt;/p&gt;

&lt;p&gt;最後に、著者はコンピュータについては全くの初心者です。多分、はじめてコンピュータを触ったばかりの人よりも遥かに劣るレベルだと思われます。その点は考慮していただけると幸いです。一緒に AppleScript を学習していきましょう。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;h3 id=&#34;applescriptについて&#34;&gt;AppleScriptについて&lt;/h3&gt;

&lt;p&gt;AppleScript は、Mac で起動する GUI(グラフィック・ユーザーインターフェース) アプリやウィンドウなどを操作することに使える補助的なスクリプトです。&lt;/p&gt;

&lt;p&gt;著者は CLI(コマンドライン・インターフェイス) に生息しているため、これを CLI から実行するコンセプトで書いていきます。&lt;/p&gt;

&lt;p&gt;その他の内部的なシステムの変更はコマンドで行えます。&lt;/p&gt;

&lt;p&gt;この記事では直接 AppleScript と関係するわけではありませんが、いくつか Mac を操作するコマンドを解説することにします。&lt;/p&gt;

&lt;h3 id=&#34;方針について&#34;&gt;方針について&lt;/h3&gt;

&lt;p&gt;当記事の方針の一つは、著者が後々利用しやすいように作っていく方針です。&lt;/p&gt;

&lt;p&gt;一部、表現等に正確ではないものも含まれると思いますが、この記事では正確さよりも分かりやすさを重視します。もし正確な情報が欲しければ、&lt;a href=&#34;https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_cmds.html&#34;&gt;公式ドキュメント&lt;/a&gt;を参照指定ください。&lt;/p&gt;

&lt;p&gt;なお、内容が充実してきたら別ページにも保存するかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;applescript入門&#34;&gt;AppleScript入門&lt;/h2&gt;

&lt;h3 id=&#34;applescriptの作成と実行&#34;&gt;AppleScriptの作成と実行&lt;/h3&gt;

&lt;p&gt;まずは具体例から見ていきましょう。そちらのほうが早いです。&lt;/p&gt;

&lt;p&gt;拡張子はなんでも良いのですが、公式エディタアプリは&lt;code&gt;.scpt&lt;/code&gt;などを読みます。&lt;/p&gt;

&lt;h4 id=&#34;applescript&#34;&gt;AppleScript&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;chrome_get_url.scpt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;#!/usr/bin/osascript
tell application &amp;quot;Google Chrome&amp;quot; 
	get URL of active tab of first window
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、&lt;code&gt;Google Chrome&lt;/code&gt;で開いているタブのURLを取得するスクリプトです。&lt;/p&gt;

&lt;p&gt;作成したAppleScriptには実行は権限を渡して以下のように実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod +x chrome_get_url.scpt
$ ./chrome_get_url.scpt
https://syui.gitlab.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shell&#34;&gt;Shell&lt;/h4&gt;

&lt;p&gt;AppleScriptをShellから実行するには、&lt;code&gt;osascript -e&lt;/code&gt;を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osascript -e &#39;tell application &amp;quot;Google Chrome&amp;quot; to get URL of active tab of first window&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shellscript&#34;&gt;ShellScript&lt;/h4&gt;

&lt;p&gt;ShellScript内で実行するには&lt;code&gt;osascript&lt;/code&gt;から&lt;code&gt;&amp;lt;&amp;lt; EOF&lt;/code&gt;を使います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;chrome_get_url.scpt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;#!/bin/zsh
osascript &amp;lt;&amp;lt; EOF
	tell application &amp;quot;Google Chrome&amp;quot;
		get URL of active tab of first window
	end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;cat &amp;lt;&amp;lt; EOF | osascript -
	tell application &amp;quot;Google Chrome&amp;quot;
		get URL of active tab of first window
	end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、ShellScript内で実行するメリットを一つ紹介しておきます。それは、引数が使いやすいからです。例えば、以下のように引数を&lt;code&gt;$1&lt;/code&gt;などから取りやすいのです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iterm_key.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;osascript &amp;lt;&amp;lt; EOF
tell application &amp;quot;iTerm&amp;quot;
    activate
    tell application &amp;quot;System Events&amp;quot;
        delay 0.1
        keystroke &amp;quot;$1&amp;quot;
    end tell
end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、&lt;code&gt;iTerm&lt;/code&gt;に特定のキー(引数1)を入力するスクリプトです。ここでは&lt;code&gt;a&lt;/code&gt;を入力させています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x iterm_key.sh
$ ./iterm_key.sh a
a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;ctrlキーを使った入力をアプリに送る&#34;&gt;Ctrlキーを使った入力をアプリに送る&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/osascript
tell application &amp;quot;iTerm&amp;quot;
    activate
    tell application &amp;quot;System Events&amp;quot;
        delay 0.2
        keystroke &amp;quot;v&amp;quot; using {command down}
    end tell
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;特定のアプリのwindowの情報を取得する&#34;&gt;特定のアプリのWindowの情報を取得する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/osascript
tell application &amp;quot;iTerm&amp;quot;
	get id of every window
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osascript -e &#39;tell application &amp;quot;System Events&amp;quot; to get properties of first window of application process &amp;quot;iTerm2&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;特定のアプリのwindowを選択する&#34;&gt;特定のアプリのWindowを選択する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;peco&lt;/code&gt;を使って&lt;code&gt;iTerm2&lt;/code&gt;のウィンドウを選択するスクリプトです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/zsh
i=`osascript -e &#39;tell application &amp;quot;iTerm&amp;quot; to get id of every window&#39;
i=`echo &amp;quot;$i&amp;quot;|tr , &#39;\n&#39;|tr -d , |cut -d &#39;-&#39; -f 2|peco`
osascript &amp;lt;&amp;lt;EOF
	tell application &amp;quot;iTerm&amp;quot; to select window $i
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iterm2のウィンドウサイズを変更する&#34;&gt;iTerm2のウィンドウサイズを変更する&lt;/h3&gt;

&lt;p&gt;まずはコマンドを使って変更したいウィンドウサイズにしておきます。なぜなら、そこからサイズ情報を取得するからです。その後、以下のスクリプトを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/zsh
i=`osascript -e &#39;tell application &amp;quot;System Events&amp;quot; to get properties of first window of application process &amp;quot;iTerm2&amp;quot;&#39;`
i=`echo &amp;quot;$i&amp;quot;| tr &amp;quot;:&amp;quot; &amp;quot;\n&amp;quot; | grep -A 1 -e position -e size|awk &amp;quot;NR==2;NR==5&amp;quot;`
export a=`echo &amp;quot;$i&amp;quot;|awk &amp;quot;NR==1&amp;quot;|cut -d , -f 1-2`
export b=`echo &amp;quot;$i&amp;quot;|awk &amp;quot;NR==2&amp;quot;|cut -d , -f 1-2`
echo $a
echo $b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、出力された情報を使って以下のスクリプトを実行します。なお、&lt;code&gt;process &amp;quot;iTerm2&amp;quot;&lt;/code&gt;になっていることに注意。&lt;code&gt;application &amp;quot;iTerm&amp;quot;&lt;/code&gt;と指定することとの違いです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/zsh
osascript &amp;lt;&amp;lt;EOF
	tell application &amp;quot;System Events&amp;quot;
		set position of first window of application process &amp;quot;iTerm2&amp;quot; to {$a}
		set size of first window of application process &amp;quot;iTerm2&amp;quot; to {$b}
	end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/zsh
osascript &amp;lt;&amp;lt;EOF
	tell application &amp;quot;System Events&amp;quot; to tell application process &amp;quot;iTerm2&amp;quot;
		set position of window 1 to {$a}
		set size of window 1 to {$b}
	end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/zsh
osascript &amp;lt;&amp;lt;EOF
	tell application &amp;quot;System Events&amp;quot;
		tell application process &amp;quot;iTerm2&amp;quot;
			set position of window 1 to {$a}
			set size of window 1 to {$b}
		end tell
	end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的には、それぞれのディスプレイによってウィンドウサイズは変わってくるので&lt;code&gt;top&lt;/code&gt;や&lt;code&gt;left&lt;/code&gt;など定型情報を保存しておき、適時、&lt;code&gt;peco&lt;/code&gt;などから選択できるようにしておくと便利です。&lt;/p&gt;

&lt;p&gt;また、同じ動作をするスクリプトでも書き方は様々です。&lt;/p&gt;

&lt;p&gt;これは、個人の好みにもよりますが、個人的には一番上の書き方が好きです。しかし、一般的に好まれるのは一番下の書き方でしょう。&lt;/p&gt;

&lt;p&gt;できる限り、再現性及び再利用を考慮した上で書くようにすればいいと思います。&lt;/p&gt;

&lt;h3 id=&#34;itermのウィンドウ透過度を設定する&#34;&gt;iTermのウィンドウ透過度を設定する&lt;/h3&gt;

&lt;p&gt;まず最初に透過設定をONにしています。次に、透過度を設定する処理です。この方法は&lt;code&gt;iTerm3&lt;/code&gt;に対応しています。具体的には、&lt;code&gt;current terminal&lt;/code&gt;を&lt;code&gt;window 1&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/zsh

osascript &amp;lt;&amp;lt;EOF
tell application &amp;quot;iTerm&amp;quot;
  if the transparency of the current session of window 1 &amp;gt; 0 then
    set the transparency of the current session of window 1 to 0
  else
    set the transparency of the current session of window 1 to 1
  end if
end tell
EOF

osascript &amp;lt;&amp;lt;EOF
tell application &amp;quot;iTerm&amp;quot;
	tell current session of first window
      set transparency to 0.3
    end tell
end tell
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vlcのウィンドウを複数操作する&#34;&gt;VLCのウィンドウを複数操作する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;VLC&lt;/code&gt;のウィンドウは非常に厄介なことになっており、&lt;code&gt;window id&lt;/code&gt;も一つしかありません。したがって、&lt;code&gt;pid&lt;/code&gt;から操作していかなければなりません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/osascript
-- http://stackoverflow.com/questions/22940975/opening-multiple-windows-with-applescript
set WIN_POSITIONS to {{1366,239}, {2326, 240}}
set WIN_SIZES to {{960,598}, {960, 528}}
tell application &amp;quot;System Events&amp;quot;
    set vlcPids to get the unix id of every process whose name is &amp;quot;VLC&amp;quot;
    set winNdx to 1
    repeat with vlcPid in vlcPids
        set haveWin to false
        tell (first process whose unix id is vlcPid)
            repeat with i from 1 to 25 # times out after 25 * .2 == 5 secs.
                if (count of windows of it) &amp;gt; 0 then
                    set haveWin to true
                    tell front window of it
                        set position to item winNdx of WIN_POSITIONS
                        set size to item winNdx of WIN_SIZES
                    end tell
                    exit repeat
                end if
                delay 0.2 # no window yet; sleep some and try again
            end repeat
        end tell
        if not haveWin then error &amp;quot;VLC instance &amp;quot; &amp;amp; vlcPid &amp;amp; &amp;quot; unexpectedly did not create a window within the timeout period.&amp;quot;
        set winNdx to winNdx + 1
    end repeat
end tell
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>