<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on アニメ海外反応</title>
    <link>https://anime.syui.cf/tags/html/index.xml</link>
    <description>Recent content in Html on アニメ海外反応</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [term](https://gitlab.com/syui/hugo-theme-term).</copyright>
    <atom:link href="https://anime.syui.cf/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Webフロントエンド</title>
      <link>https://anime.syui.cf/2016-10-16-web-front-end</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://anime.syui.cf/2016-10-16-web-front-end</guid>
      <description>&lt;p&gt;ここではWebフロントエンドのTipsをまとめていきたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;h3 id=&#34;webフロントエンドとは&#34;&gt;Webフロントエンドとは&lt;/h3&gt;

&lt;p&gt;Webフロントエンドは、簡単に言うとWebサイトの表の顔のことです。Webサイトのレイアウトをイメージしていただければわかりやすいと思います。&lt;/p&gt;

&lt;p&gt;しかし、一言で表の顔と言っても様々な要素を含みます。例えば、見た目はもちろんのこと、クリックしたときのエフェクトやフォームからの情報取得などです。&lt;/p&gt;

&lt;p&gt;反対にWebサイトの裏の顔をここではバックエンド、サーバーサイド、インフラ系などと表現することがあります。&lt;/p&gt;

&lt;h3 id=&#34;webの仕組み&#34;&gt;Webの仕組み&lt;/h3&gt;

&lt;p&gt;まずは一般的なイメージから説明すると、Webというものは作ったページをネットワークにアップロードし、世界中のどこからでもそのページにアクセスできる状態をイメージできます。&lt;/p&gt;

&lt;p&gt;このような仕組みは、ドメインと言うネットワーク上の名前(場所と結び付けられた名前)と、ネットワークにつながっているサーバーによって実現されます。そして、Webページを閲覧できる状態にするサーバーをWebサーバーと呼びます。&lt;/p&gt;

&lt;p&gt;ただし、ページにアクセスするには必ずドメインが必要になるわけではありません。WebサーバーのIPアドレスからもアクセスはできます。IPアドレスというのはネットワーク上の場所を意味するからです。しかし、グローバルIPアドレスは高いお金を払って固定しない限り、日々変動するのでアクセスが難しくなります。そこで、IPアドレス(場所)とアルファベット文字列を使った特定の名前を結びつけるのがドメインの役割です。&lt;/p&gt;

&lt;p&gt;つまり、ページを作ってそれを公開する場所をWebサーバーといい、Webサーバーのある場所にアクセスしやすいようIPアドレスを名前解決するものがドメインということになります。&lt;/p&gt;

&lt;p&gt;もちろん、ドメインの役割はそれだけではありませんが、詳しい解説は他をあたってください。&lt;/p&gt;

&lt;p&gt;一般的にはWebサーバーを業者からレンタルし、ドメインを業者から取得(時間単位)して運用するのが一般的です。&lt;/p&gt;

&lt;p&gt;この記事ではWebフロントエンド中心の解説になると思いますが、Webバックエンドに関する部分もWebサイトを始めるにあたって必要な部分はちょっとだけ紹介することにします。&lt;/p&gt;

&lt;p&gt;ただし、本格的なものではありません。Webバックエンドを本格的に紹介するとなるとログやトラフィックの解析、ネットワークの構築、セキュリティ、ユーザー管理などをまとめなければなりませんし、非常に広範です。&lt;/p&gt;

&lt;h3 id=&#34;方針について&#34;&gt;方針について&lt;/h3&gt;

&lt;p&gt;当記事の方針の一つは、著者が後々利用しやすいように作っていく方針です。&lt;/p&gt;

&lt;p&gt;一部、表現等に正確ではないものも含まれると思いますが、この記事では正確さよりも分かりやすさを重視します。もし正確な情報が欲しければ、公式ドキュメントを参照してください。&lt;/p&gt;

&lt;p&gt;なお、内容が充実してきたら別ページにも保存するかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;著者のレベル&#34;&gt;著者のレベル&lt;/h3&gt;

&lt;p&gt;著者はWebフロントエンドについては初心者です。この記事は調べたものを載せるというより、ほとんどがアドリブで、定義なども単に自分のイメージを書いているに過ぎません。&lt;/p&gt;

&lt;h2 id=&#34;webバックエンド&#34;&gt;Webバックエンド&lt;/h2&gt;

&lt;p&gt;有料の場合は&lt;a href=&#34;https://www.xdomain.ne.jp/&#34;&gt;Xドメイン&lt;/a&gt;と&lt;a href=&#34;https://www.xserver.ne.jp/&#34;&gt;Xサーバー&lt;/a&gt;をおすすめします。非常に一般的で解約も簡単です。&lt;/p&gt;

&lt;p&gt;この点、他の日本業者は悪質な業者も多く、有名なところでも疑問が浮かぶ業者は多いです。したがって、サービスを登録する場合、特に注意しなければなりません。ちゃんと下調べしてから契約することにしましょう。と言ってもこの辺りの分野だと検索しても本当の情報はなかなか入手しづらい状況です。したがって、身近に詳しい人がいればその人に聞くのが一番だと思います。&lt;/p&gt;

&lt;h3 id=&#34;無料ドメインの取得&#34;&gt;無料ドメインの取得&lt;/h3&gt;

&lt;p&gt;ドメインの&lt;code&gt;.tk&lt;/code&gt;などは無料で&lt;a href=&#34;http://www.freenom.com/&#34;&gt;Freenom&lt;/a&gt;や&lt;a href=&#34;http://www.dot.tk/&#34;&gt;Dot TK&lt;/a&gt;から取得できます。&lt;/p&gt;

&lt;p&gt;取得したドメインはWebサーバーの運用を他人に任せている場合でも使用することができます。元のアドレスからリダイレクト(転送)するという選択もあります。&lt;/p&gt;

&lt;h3 id=&#34;sslの取得&#34;&gt;SSLの取得&lt;/h3&gt;

&lt;p&gt;無料でSSLを有効にするには&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;というサービスがあります。また、Webサーバーを運用している人は&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;を使うことができます。&lt;/p&gt;

&lt;p&gt;SSLというのは、通信の暗号化技術を指す言葉で、SSL証明書を取得することでWebサイトへのアクセスを&lt;code&gt;https&lt;/code&gt;プロトコルを使って通信できるようになります。httpsプロトコルを使って通信することで、通信内容は暗号化され、通信傍受などが困難になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https&lt;/code&gt;でWebサイトにアクセスし、ページの通信全体が問題なく暗号化されていればブラウザのアドレスバーに緑の鍵マークが表示されるようになります。&lt;/p&gt;

&lt;h3 id=&#34;webサーバーにホストする&#34;&gt;Webサーバーにホストする&lt;/h3&gt;

&lt;p&gt;Webサーバーの運用には、PaaS(Platform as a Service)と呼ばれるサービスを利用することもできます。&lt;/p&gt;

&lt;p&gt;例えば、&lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, &lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://console.ng.bluemix.net/&#34;&gt;Bluemix&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud&lt;/a&gt;などを使うことができます。これらはWebアプリなどにも使われることが多いプラットフォームです。しかし、大抵の場合、Web Serverとしても機能し、Webサイトをホストすることができます。&lt;/p&gt;

&lt;p&gt;個人的におすすめなのは&lt;code&gt;Heroku&lt;/code&gt;と&lt;code&gt;Google Cloud&lt;/code&gt;です。しかし、フリーで使う場合はいくつか無料制限があるのにも気をつけなければなりません。例えば、Herokuでは1日中アプリを動かすことができません。6時間のスリープが必要となり、定期的に呼び出しがないと自動スリープします。したがって、Herokuでページをホストする場合でも最初のアクセスに時間がかかることがあります。もし有料で使うとしたら、こちらがおすすめです。&lt;/p&gt;

&lt;h3 id=&#34;サービスを利用する&#34;&gt;サービスを利用する&lt;/h3&gt;

&lt;p&gt;データベースやトラフィックを管理しないで良いなら、GitHubやGitLabのアカウントを使ってWebページを公開することができます。この場合、Webサーバーは当該ホストする企業が管理することになり、自分で管理することはできません。したがって、Webサーバー側の設定も自分で変更することはできなくなります。&lt;/p&gt;

&lt;p&gt;多少の不便はありますが、Webサーバーの管理を任せることにはメリットもあります。Webサーバーの管理は、時間もお金もかかり、なおかつ高度なセキュリティ知識を必要とします。&lt;/p&gt;

&lt;p&gt;PaaSと比較し、できることは減りますが、こちらのほうが良い場合もあります。&lt;/p&gt;

&lt;h3 id=&#34;レイアウトを考える&#34;&gt;レイアウトを考える&lt;/h3&gt;

&lt;p&gt;レイアウト、要はサイトやブログの外見ですね。&lt;/p&gt;

&lt;p&gt;これをどうしたらいいのかというと、まずは、自分が良いと思ったデザインを真似してみることから始めるのが良いと思います。&lt;/p&gt;

&lt;p&gt;世の中には自分で考えたものよりも遥かに素晴らしいデザインやレイアウトが溢れています。そこからインスピレーションを分けてもらいましょう。何もないところから頭を絞って考えるよりも遥かに効率的です。&lt;/p&gt;

&lt;p&gt;しかし、真似と言ってもソースコードから全部を真似をするのではなく、おすすめはコードは自分で書くけど、外見を真似するってことですね。もちろん、ケースバイケースですが、基本的な姿勢としてはそれが良いと思います。&lt;/p&gt;

&lt;p&gt;私の場合、&lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt;や&lt;a href=&#34;https://apple.com&#34;&gt;Apple&lt;/a&gt;のサイトがかっこいいなと思ったので、TwitterやAppleのサイトのレイアウトをポイントだけ抽出して、真似して作りました。&lt;/p&gt;

&lt;p&gt;ポイントというのは、例えば、ヘッダーメニューなどです。色合いや文字サイズ、エフェクトや表示方法などです。&lt;/p&gt;

&lt;p&gt;ただし、全部真似しているかというと、見ればわかりますが、そうではありません。&lt;/p&gt;

&lt;p&gt;私のサイトは、あくまで部分を真似しているところはあるけれど、全部が全部、TwiiterのサイトやAppleのサイトになっているかと言いうとそうではありません。&lt;/p&gt;

&lt;p&gt;なぜなら、いくらかっこいいサイトでも、全部が全部かっこいいのかというと、それは違うと考えるからです。どのサイトにも、「自分ならここはこうした方がいいと思う」という部分は必ずあります。&lt;/p&gt;

&lt;p&gt;これはあくまで私の主観ですが、「こうやったほうが、この部分はかっこよくなる」というのが必ずどのサイトにもあるものです。それは、たとえプロが作ったサイトであってもです。&lt;/p&gt;

&lt;p&gt;その部分に関しては、自分の感性を優先させます。これは非常に重要なことです。&lt;/p&gt;

&lt;p&gt;つまり、最初は&lt;code&gt;かっこいい!&lt;/code&gt;や&lt;code&gt;かわいい!&lt;/code&gt;を見つける作業ですが、最後には&lt;code&gt;ここはこうした方がかっこいい!&lt;/code&gt;を付け足していく作業なのです。&lt;/p&gt;

&lt;p&gt;割合で言うと8割は真似をして2割はオリジナルという感じです。&lt;/p&gt;

&lt;p&gt;もちろん、自分の感性で良いと思った部分が5割ならその5割を優先させますが、私の場合、巷にあふれているサイトのほうがかっこよく仕上がっていると思うことのほうが多いのです。&lt;/p&gt;

&lt;p&gt;ただ、一つだけ言えることは、自分が良いと思った部分、自分で考えたレイアウトは大切にしたほうがいいということです。&lt;/p&gt;

&lt;p&gt;そもそもデザインやレイアウトというのは個人の感覚が最も強く現れる部分でもあります。&lt;/p&gt;

&lt;p&gt;どのサイトであっても、たとえ全部他人のテンプレートを使っていたとしても、個性は現れます。それは選択という部分でも個性が出るからです。&lt;/p&gt;

&lt;p&gt;しかし、既に並んだものを選択するよりも、まだ並んだことのないものを自分で作るほうが、より自分の理想に近づいたレイアウトになる確率は高くなります。&lt;/p&gt;

&lt;h3 id=&#34;レイアウトを作る&#34;&gt;レイアウトを作る&lt;/h3&gt;

&lt;p&gt;レイアウトをどうやって形作っているかを簡単に説明します。&lt;/p&gt;

&lt;p&gt;これは、インターネットブラウザの機能を使います。例えば、Google Chromeの場合、右クリックして&lt;code&gt;検証&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;すると、下の方に&lt;code&gt;Styles&lt;/code&gt;という項目が出てきますが、そこの値を変更したりしながら、理想のレイアウトを探していく作業になると思います。&lt;/p&gt;

&lt;p&gt;まずは自分がかっこいいなと思ったサイトを見つけ、そして、そのサイトを&lt;code&gt;検証&lt;/code&gt;をしながら自分が「ここはこうやったほうがかっこいいな」と思うポイントを見つけていきましょう。&lt;/p&gt;

&lt;p&gt;完璧なレイアウトは存在しませんし、流行りのデザインなども年々変化していきます。あの時はかっこよかったものでも、今はそれほどでもないということは多いかもしれません。&lt;/p&gt;

&lt;p&gt;したがって、最も重要なのは、その時、その瞬間、自分がどう感じるかです。&lt;/p&gt;

&lt;p&gt;それを忘れずに、かつ流行りのデザインの良い部分を見つけ、そして、それに自分が良いと思った変化を付け足していきましょう。&lt;/p&gt;

&lt;h3 id=&#34;シンプルの先から&#34;&gt;シンプルの先から&lt;/h3&gt;

&lt;p&gt;変化を付け足していくのとは逆の発想になるかもしれませんが、デザインやレイアウトを考える際には、引き算も大切です。&lt;/p&gt;

&lt;p&gt;特に、ごちゃごちゃしたデザインには引き算が必要ですよね。&lt;/p&gt;

&lt;p&gt;したがって、常に自分の価値を付け足していくということにこだわらず、時には自分の価値観で引き算をしていくことも大切だと思います。&lt;/p&gt;

&lt;p&gt;私はどちらかと言うと、レイアウトを考える際には消していく作業のほうが最終的には多くなります。&lt;/p&gt;

&lt;p&gt;ただ、最初から引き算で考えるのかというと、そうではありません。元がなければ引き算はできませんし、元が少なければ引き算はマイナスの効果しか生み出さないでしょう。&lt;/p&gt;

&lt;p&gt;したがって、最初は足し算で元を大きくし、最後に引き算で一気に減量するというのが、私がデザインを考える際の大体のパターンになります。&lt;/p&gt;

&lt;p&gt;最初からシンプルに設計する、考えるという方法もありますが、それでは種を巻いた直後に育ってもいない芽を切り取る作業になってしまい、せっかく育ったらいい芽になったのにということはあるかもしれません。そして、それは育ってみないとわからないことでもあります。&lt;/p&gt;

&lt;p&gt;したがって、私はあえて無駄に見える一旦育ててから刈り取るという一連の流れを採用することが多いです。&lt;/p&gt;

&lt;p&gt;もちろん、やり方は人それぞれで、最初からどうせシンプルにするんだからそこから考えたほうがいいと思う人もいるし、そのやり方が間違っているわけではありません。&lt;/p&gt;

&lt;p&gt;しかし、私のやり方としてはシンプルを目指す前に、一旦、材料を増やす、無駄を生み出すという工程を経ることがあります。&lt;/p&gt;

&lt;h3 id=&#34;直感的作業&#34;&gt;直感的作業&lt;/h3&gt;

&lt;p&gt;デザインというのは何か法則があって、その仕組みに沿って出来上がっている、こうでなければならないみたいな主張を見かけることがあります。&lt;/p&gt;

&lt;p&gt;しかし、私の考えは違います。過去から現在にかけてのデザインの流行を見てみても、そんなものはどこにもありません。&lt;/p&gt;

&lt;p&gt;したがって、もっと自由で良いのだと思います。デザインは自由で良い。&lt;/p&gt;

&lt;p&gt;でも、自由でいいと言っても漠然としすぎていますよね。&lt;/p&gt;

&lt;p&gt;ということで、これがどういう意味なのかを説明します。&lt;/p&gt;

&lt;p&gt;デザインは自由でいいというのは、直感で決めて良いってことです。&lt;/p&gt;

&lt;p&gt;反対に、ルールを作ってそれに沿って仕上げてもいいです。&lt;/p&gt;

&lt;p&gt;ただし、このルールを他人が作るのでは、それは自由ではありません。ルールは他人が作ったルールに従うのではなく、ルールは自分で作りましょう。&lt;/p&gt;

&lt;p&gt;多くのデザイナーが「こういうルールがある、ああいうルールがある、こういう仕組みがある」と説明するのを見かけることがあるかもしれません。しかし、それは盲目的に従うべきものではありません。参考にするのは良いかもしれませんが、それは絶対的な仕組みでもなければ、ルールでもありません。もちろん、正しいことでもありません。正しさは自分自身で判断しなければなりません。やがて最新のデザインも過去のものになり、どんなものでも常に変化していきます。時には予測もできなかった変化もあるでしょう。&lt;/p&gt;

&lt;p&gt;そんな中、変化に対応し、時に変化自体を作り出していくことが時代には求められていくと思います。&lt;/p&gt;

&lt;p&gt;私はそんなふうに考えています。&lt;/p&gt;

&lt;h2 id=&#34;paasからデータベースサーバーを使い一つの認証ページを作成する方法&#34;&gt;PaaSからデータベースサーバーを使い一つの認証ページを作成する方法&lt;/h2&gt;

&lt;p&gt;基本的には、以下のような構成になります。この流れを見ていくことで、Webフロントエンド(多少のバックエンドを含め)についてなんとなく理解できるのではないかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザー管理に&lt;a href=&#34;https://www.drupal.org/&#34;&gt;Drupal&lt;/a&gt;を使い、そのホスト先として&lt;a href=&#34;https://pantheon.io/&#34;&gt;Pantheon&lt;/a&gt;を選択する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Gizra/hedley-server&#34;&gt;hedley-server&lt;/a&gt;を使ってDrupalのProfileを自動生成する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Gizra/elm-hedley&#34;&gt;elm-hedley&lt;/a&gt;を使ってページを作成する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ページを&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;にホストする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デモは以下のページに作成しました。&lt;/p&gt;

&lt;p&gt;デモ : &lt;a href=&#34;https://syui.github.io/elm-hedley/&#34;&gt;https://syui.github.io/elm-hedley/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>